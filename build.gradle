buildscript {
    ext {
        springBootVersion = '2.1.7.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}",
                "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7.1")
    }
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: 'org.sonarqube'

group = 'com.comp.dept'
sourceCompatibility = '8'


repositories {
    mavenCentral()
    maven {
        url 'https://'
        credentials {
            username System.properties['artifactory_username']
            password System.properties['artifactory_password']
        }

    }
}

configurations {
    bootJar.archiveName = 'app.jar'
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    // Sleuth
    implementation('org.springframework.cloud:spring-cloud-starter-sleuth:2.1.7.RELEASE') 
    implementation('org.springframework.cloud:spring-cloud-starter-config:2.1.7.RELEASE')

    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: '2.1.7.RELEASE'
    implementation 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc', version: '2.1.7.RELEASE'
    implementation group: 'mysql', name: 'mysql-connector-java', version: '5.1.13'

    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-xml', version: '2.9.9'
    implementation group: 'com.comp.dept', name: 'app-utils', version: '3.1.51'

    //OK Http
    implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: '4.9.0'
    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: '1.4.10'

    implementation group: 'org.springframework.retry', name: 'spring-retry', version: '1.2.4.RELEASE'


    //swagger
    implementation group: 'io.springfox', name: 'springfox-swagger2', version: '2.9.2'
    implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.9.2'
    
    // Junit
    testImplementation(group: 'org.springframework.boot', name: 'spring-boot-starter-test') {
        exclude group: 'junit'
    }
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.4.0'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.4.0'
    testImplementation group: 'org.junit.platform', name: 'junit-platform-commons', version: '1.4.0'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '2.25.0'
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '2.25.0'
    testImplementation('com.h2database:h2')
}

test {
    useJUnitPlatform()
}
test.finalizedBy(project.tasks.jacocoTestReport)

jacocoTestReport {
    group = 'Reporting'
    description = 'Generate Jacoco coverage reports.'
    getAdditionalSourceDirs().setFrom(files(sourceSets.main.java))

    reports {
        xml.enabled = true
        html.enabled = true
    }
    afterEvaluate {
        getClassDirectories().setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/domain/**', '**/dto/**', '**/config/**', '**/constants/**'])
        }))

    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
            excludes = [
                    'com.comp.dept.service.dto.*'
            ]
        }
    }
}

task cleanBuildTempFolder {
    doLast {
        delete 'build/tmp'
    }
}

build.finalizedBy(cleanBuildTempFolder)
test.finalizedBy(jacocoTestReport, cleanBuildTempFolder)
jacocoTestCoverageVerification.mustRunAfter jacocoTestReport
